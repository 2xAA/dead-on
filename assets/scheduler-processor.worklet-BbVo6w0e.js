var u=Object.defineProperty;var m=(i,s,r)=>s in i?u(i,s,{enumerable:!0,configurable:!0,writable:!0,value:r}):i[s]=r;var e=(i,s,r)=>m(i,typeof s!="symbol"?s+"":s,r);(function(){"use strict";class i extends AudioWorkletProcessor{constructor(a){super();e(this,"bpm");e(this,"ppqn");e(this,"currentSample");e(this,"tickCount");e(this,"startTimeMs");this.bpm=a.processorOptions.bpm||120,this.ppqn=a.processorOptions.ppqn||24,this.currentSample=0,this.tickCount=0,this.startTimeMs=0,this.port.onmessage=t=>{t.data&&t.data.type==="updateBPM"?(this.bpm=t.data.bpm,t.data.time!=null&&(this.startTimeMs=t.data.time),this.tickCount=0,this.currentSample=0):t.data&&t.data.type==="updatePPQN"?(this.ppqn=t.data.ppqn,t.data.time!=null&&(this.startTimeMs=t.data.time),this.tickCount=0,this.currentSample=0):t.data&&t.data.type==="start"&&(this.startTimeMs=t.data.time,this.tickCount=0,this.currentSample=0)}}get tickIntervalSec(){return 60/(this.bpm*this.ppqn)}get samplesPerTick(){return this.tickIntervalSec*sampleRate}process(a,t){var p,c;const h=((c=(p=t[0])==null?void 0:p[0])==null?void 0:c.length)||128;for(this.currentSample+=h;this.currentSample>=this.samplesPerTick;){this.currentSample-=this.samplesPerTick;const o=this.startTimeMs+this.tickCount*this.tickIntervalSec*1e3;this.port.postMessage({type:"tick",scheduledTime:o}),this.tickCount++}return!0}}registerProcessor("scheduler-processor",i)})();
